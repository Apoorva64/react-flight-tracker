.default-yarn:
  image: node:20.5
  before_script:
    - yarn install
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    policy: pull-push
    paths:
      - node_modules/
      - .yarn/
      - .cache/

.build-on:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'

stages:
  - version
  - lint
  - build
  - test
  - release
  - dast

get-next-version:
  extends:
    - .default-yarn
    - .build-on
  stage: version
  script:
    - npx semantic-release --dry-run --no-ci
    - test -e .VERSION || (echo $(git describe --abbrev=0 --tags | cut -c2- ) > .VERSION && touch .NORELEASE)
    - echo "Determined Version $(cat .VERSION)"
  artifacts:
    paths:
      - .VERSION
      - .NORELEASE
    expire_in: 1 week

lint:
  extends: .default-yarn
  stage: lint
  script:
    - yarn lint
    - yarn format:check
    - npx tsc --noEmit

build-app:
  extends:
    - .default-yarn
    - .build-on
  stage: build
  script:
    - export VITE_APP_VERSION=$(cat .VERSION)
    - yarn build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

variables:
  DOCKER_DRIVER: overlay2
  BUILDX_VERSION: "v0.5.1"
  BUILDX_ARCH: "linux-amd64"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375/

build-image:
  extends: .build-on
  image: docker:20.10
  stage: build

  needs:
    - job: build-app
      artifacts: true
    - job: get-next-version
      artifacts: true
  services:
    - docker:20.10-dind
  before_script:
    - echo "Waiting for docker cli to respond before continuing build..."
    - |
      for i in $(seq 1 20); do
          if ! docker info &> /dev/null; then
              echo "Docker not responding yet. Sleeping for 2s..." && sleep 2s
          else
              echo "Docker ready. Continuing build..."
              break
          fi
      done
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - wget -O /usr/bin/docker-buildx
      https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.${BUILDX_ARCH}
    - chmod +x /usr/bin/docker-buildx
    - apk add --no-cache git
  script:
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    # pull the latest version of the branch we are building as the version is updated in the release job
    - docker buildx create --use --name buildcontext
    - >
      docker buildx build
      --platform linux/amd64,linux/arm64,linux/arm/v7
      --push
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
      --file Dockerfile .
  tags:
    - docker

sonarqube-check:
  extends: .build-on
  image:
    name: noenv/sonar-scanner
    entrypoint: [""]
  stage: test
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true

release-docker:
  extends: .build-on
  image: docker:20.10
  stage: release
  services:
    - docker:20.10-dind
  before_script:
    - echo "Waiting for docker cli to respond before continuing build..."
    - |
      for i in $(seq 1 20); do
          if ! docker info &> /dev/null; then
              echo "Docker not responding yet. Sleeping for 2s..." && sleep 2s
          else
              echo "Docker ready. Continuing build..."
              break
          fi
      done
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - apk add --no-cache git
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG || true
  script:
    - cat .VERSION
    - VERSION=$(cat .VERSION)
    - VERSION_MAJOR=$(echo $VERSION | cut -d. -f1)
    - VERSION_MINOR=$(echo $VERSION | cut -d. -f2)
    - SHORTVERSION=$VERSION_MAJOR.$VERSION_MINOR
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:$VERSION
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:$SHORTVERSION
    - docker push $CI_REGISTRY_IMAGE:$VERSION
    - docker push $CI_REGISTRY_IMAGE:$SHORTVERSION

release:
  extends:
    - .default-yarn
    - .build-on
  stage: release
  script:
    - yarn semantic-release

dast:
  stage: dast
  needs:
    - release
  variables:
    DAST_WEBSITE: "https://react-flight-tracker.dev.apoorva64.com/"
    DAST_BROWSER_SCAN: "true"
    DAST_SPIDER_SCAN: "true"
include:
  # - template: Security/SAST.gitlab-ci.yml
  - template: Security/DAST.gitlab-ci.yml
